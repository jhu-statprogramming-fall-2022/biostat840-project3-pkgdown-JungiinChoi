xlab("Population") +
ylab("County") +
labs(title = "Total Population from 2014 to 2018",
subtitle = "by county in Maryland",
caption = "Baltimore is consist of Baltimore City and Baltimore County")
counties <- read.csv("data/counties.csv")[,-1]
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.cases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.cases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties %>%
filter(state == "MD" | state == "DE" | state == "WY")%>%
ggplot(aes(x=completed, y = case.rate)) +
geom_line()+
facet_wrap(~state) +
xlab("Population") +
ylab("County") +
labs(title = "Total Population from 2014 to 2018",
subtitle = "by county in Maryland",
caption = "Baltimore is consist of Baltimore City and Baltimore County")
historic <- read.csv("data/historic.csv")[,-1]
head(historic)
summary(historic)
head(historic)
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(population)) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
population.total = sum(population),
bed.capacity = bed / population.total )
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(population))
historic <- read.csv("data/historic.csv")[,-1]
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation))
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation"))
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation")) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
bed.capacity = bed / population.total)
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation")) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
bed.capacity = bed / hsaPopulation)
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation")) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
bed.capacity = bed / hsaPopulation) %>%
ggplot(aes(x = bed.capacity, y = reorder(state, bed.capacity))) +
geom_bar(stat='identity')  +
labs(title = "Median household income",
subtitle = "by county in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation")) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
bed.capacity = bed / hsaPopulation)
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation)) %>%
select(c("state","actuals.hospitalBeds.capacity","hsaPopulation")) %>%
group_by(state) %>%
summarise(bed = sum(actuals.hospitalBeds.capacity),
bed.capacity = bed / mean(hsaPopulation))
historic
historic$state
historic %>%
filter(!is.na(actuals.hospitalBeds.capacity), !is.na(hsaPopulation))
head(historic)
historic %>%
filter(!is.na(metrics.infectionRate), !is.na(actuals.cases)) %>%
select(c("state","metrics.infectionRate","actuals.cases"))
historic %>%
filter(!is.na(metrics.infectionRate), !is.na(actuals.cases)) %>%
select(c("state","metrics.infectionRate","actuals.cases")) %>%
group_by(state) %>%
summarise(cases = max(actuals.cases),
average.infectionRate = mean(metrics.infectionRate)))
head(historic)
historic %>%
filter(!is.na(metrics.infectionRate), !is.na(actuals.cases)) %>%
select(c("state","metrics.infectionRate","actuals.cases")) %>%
group_by(state) %>%
summarise(cases = max(actuals.cases),
average.infectionRate = mean(metrics.infectionRate))
head(historic)
historic %>%
filter(!is.na(metrics.infectionRate), !is.na(actuals.vaccinationsCompleted)) %>%
select(c("state","metrics.infectionRate","actuals.vaccinationsCompleted")) %>%
group_by(state) %>%
summarise(cases = max(actuals.vaccinationsCompleted),
average.infectionRate = min(metrics.infectionRate))
historic %>%
filter(!is.na(metrics.weeklyNewCasesPer100k), !is.na(actuals.vaccinationsCompleted)) %>%
select(c("state","metrics.weeklyNewCasesPer100k","actuals.vaccinationsCompleted")) %>%
group_by(state) %>%
summarise(cases = max(actuals.vaccinationsCompleted),
average.infectionRate = min(metrics.weeklyNewCasesPer100k))
historic %>%
filter(!is.na(metrics.weeklyNewCasesPer100k), !is.na(actuals.vaccinationsCompleted)) %>%
select(c("state","metrics.weeklyNewCasesPer100k","actuals.vaccinationsCompleted")) %>%
group_by(state) %>%
summarise(vaccination = max(actuals.vaccinationsCompleted),
weeklyNewCases = min(metrics.weeklyNewCasesPer100k)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Median household income",
subtitle = "by county in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
head(historic)
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Median household income",
subtitle = "by county in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
ylim(0.5,1)+
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
xlim(0.5,1)+
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "2019-2020 American Community Survey",
y = "",
x = "Median household income estimate (bars represent margin of error)")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "By decreasing order of vaccinatiom completed ratio",
y = "States",
x = "Vaccination Completed Ratio")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "By decreasing order of vaccinatiom completed ratio",
y = "States",
x = "Vaccination Completed Ratio") +
scale_x_continuous(limits = c(0.5,1))
if (!dir.exists("data")){
dir.create("data")
states <- read.csv(paste0("https://api.covidactnow.org/v2/states.timeseries.csv?apiKey=",API_KEY_B))
write.csv(states,"data/states.csv")
counties <- read.csv(paste0("https://api.covidactnow.org/v2/counties.csv?apiKey=",API_KEY_B))
write.csv(counties,"data/counties.csv")
historic <- read.csv(paste0("https://api.covidactnow.org/v2/states.timeseries.csv?apiKey=",API_KEY_B))
write.csv(historic,"data/historic.csv")
}
states <- read.csv("data/historic.csv")[,-1]
counties <- read.csv("data/counties.csv")[,-1]
historic <- read.csv("data/historic.csv")[,-1]
states <- states %>%
filter(!is.na(actuals.cases), country == "US")  %>%
mutate(date = ymd(date))%>%
select(c("date","state","actuals.cases","actuals.deaths","actuals.positiveTests",
"actuals.negativeTests","metrics.testPositivityRatio"))
states %>%
ggplot(aes(x=date, y=actuals.deaths, colour=state, group = state)) +
geom_line() +
xlab("date") +
ylab("state") +
labs(title = "Total deaths from Covid-19",
subtitle = "by states in US",
caption = "from 2020-01-21 to 2022-12-13")
top10 <-  states %>%
filter(date == "2022-12-01") %>%
arrange(actuals.deaths) %>%
top_n(10) %>%
select(state)
states %>%
filter(state %in% top10[,1]) %>%
ggplot(aes(x=date, y=actuals.deaths, colour=state, group = state)) +
geom_line() +
xlab("date") +
ylab("state") +
labs(title = "Total deaths from Covid-19",
subtitle = "top 10 states in US in number of deaths",
caption = "from 2020-01-21 to 2022-12-13")
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.cases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.cases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties %>%
filter(state == "MD" | state == "DE" | state == "WY")%>%
ggplot(aes(x=completed, y = case.rate)) +
geom_line()+
facet_wrap(~state) +
xlab("Vaccinations Completed Ratio") +
ylab("Cases Ratio") +
labs(title = "Relationship between Vaccination and the Number of Cases",
subtitle = "by states with higher R.squared values",
caption = "DE, MD and WY were the states with R squared larger than 0.5")
head(counties)
counties <- read.csv("data/counties.csv")[,-1]
head(counties)
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.newCases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.newCases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.newCases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.newCases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties <- read.csv("data/counties.csv")[,-1]
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.newCases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.newCases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
head(counties)
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
counties_reg
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary)
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary)
counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary)
head(historic)
counties <- read.csv("data/counties.csv")[,-1]
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.newCases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.newCases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties_reg[!is.na(counties_reg)]
counties_reg <- counties_reg[!is.na(counties_reg)]
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
counties_reg <- counties_reg[!is.na(counties_reg)]
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.3]
counties %>%
filter(state == "ME" | state == "DE")%>%
ggplot(aes(x=completed, y = case.rate)) +
geom_line()+
facet_wrap(~state) +
xlab("Vaccinations Completed Ratio") +
ylab("Cases Ratio") +
labs(title = "Relationship between Vaccination and the Number of Cases",
subtitle = "by states with higher R.squared values",
caption = "DE, MD and WY were the states with R squared larger than 0.5")
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.cases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.cases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties <- read.csv("data/counties.csv")[,-1]
counties <- counties %>%
filter(country == "US", level == "county") %>%
select(c("state","county","population","actuals.cases", "actuals.deaths","metrics.vaccinationsCompletedRatio",
"metrics.bedsWithCovidPatientsRatio")) %>%
rename(completed = metrics.vaccinationsCompletedRatio,
bedsWithCovid = metrics.bedsWithCovidPatientsRatio) %>%
mutate(case.rate = actuals.cases / population, death.rate = actuals.deaths / population) %>%
filter(!is.na(case.rate),!is.na(completed))
counties_reg<-counties %>%
split(.$state) %>%
map(~ lm(case.rate ~ completed, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
sum(counties_reg > 0.5)/length(counties_reg)
counties_reg[counties_reg > 0.5]
counties %>%
filter(state == "MD" | state == "DE" | state == "WY")%>%
ggplot(aes(x=completed, y = case.rate)) +
geom_line()+
facet_wrap(~state) +
xlab("Vaccinations Completed Ratio") +
ylab("Cases Ratio") +
labs(title = "Relationship between Vaccination and the Number of Cases",
subtitle = "by states with higher R.squared values",
caption = "DE, MD and WY were the states with R squared larger than 0.5")
historic %>%
filter(!is.na(metrics.vaccinationsCompletedRatio)) %>%
select(c("state","metrics.vaccinationsCompletedRatio")) %>%
group_by(state) %>%
summarise(vaccination = max(metrics.vaccinationsCompletedRatio)) %>%
ggplot(aes(x = vaccination, y = reorder(state, vaccination))) +
geom_bar(stat='identity')  +
labs(title = "Vaccination Completed Ratio",
subtitle = "by States in United States",
caption = "By decreasing order of vaccinatiom completed ratio",
y = "States",
x = "Vaccination Completed Ratio")
x=seq(0,1,length=100)
x
x=seq(0,1,length=1000)
plot(x,f(x))
f <- function(s) {
if (s==0 | s==1) 0
for (i in 1:100){
if (s<1/i and s>1/(i+1)) i
f <- function(s) {
if (s==0 | s==1) {0}
for (i in 1:100){
if (s<1/i and s>1/(i+1)) {i}
f <- function(s) {
if (s==0 | s==1) {0}
for (i in 1:100){
if (s<1/i & s>1/(i+1)) {i}
}
101
}
x=seq(0,1,length=1000)
plot(x,f(x))
f(0)
f <- function(s) {
if (s==0 | s==1) {return(0)}
for (i in 1:100){
if (s<1/i & s>1/(i+1)) {return(i)}
}
return(101)
}
f(0)
plot(x,f(x))
x=seq(0,1,length=1000)
y=rep(0,1000)
for (i in 1:1000){
y[i] = f(x[i])
}
plot(x,y)
line(x,y)
line(x,y)
lines(x,y)
x=seq(0,1,length=1000)
y=rep(0,1000)
for (i in 1:1000){
y[i] = f(x[i])
}
plot(x,y, type="l")
plot(x,y, type="l",ylim=c(0,50))
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.00001,1))
f <- function(s) {
if (s==0 | s==1) {return(0)}
for (i in 1:100){
if (s<1/i & s>1/(i+1)) {return(i)}
}
return(101)
}
x=seq(0,1,length=100)
y=rep(0,100)
for (i in 1:100){
y[i] = f(x[i])
}
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.00001,1))
x=seq(0,1,length=10000)
y=rep(0,10000)
for (i in 1:10000){
y[i] = f(x[i])
}
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.00001,1))
x = x[x!=101]
x=seq(0,1,length=10000)
y=rep(0,10000)
for (i in 1:10000){
y[i] = f(x[i])
}
x = x[y!=101]
y = y[y!=101]
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.00001,1))
x = x[y!=101]
y = y[y!=101]
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.001,1))
x=seq(0.001,1,length=10000)
y=rep(0,10000)
for (i in 1:10000){
y[i] = f(x[i])
}
x = x[y!=101]
y = y[y!=101]
plot(x,y, type="l",ylim=c(0,50),xlim=c(0.001,1))
setwd("/Users/user/Documents/JHU/2nd_term/StatProgramming/Proj3/Part1")
ls
getwd()
usethis::use_pkgdown()
